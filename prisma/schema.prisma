generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
  ///////postId в других схемах///////
  id          Int         @id @default(autoincrement())
  ////////////////////////////////////
  poster      User        @relation(fields: [posterId], references: [uuid])
  posterId    String
  title       String
  type        String
  description String
  price       String
  favoritedBy Favorites[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  thumbnails  Thumbnail[]
  car         Car?
  estate      Estate?
}

model Thumbnail {
  id        Int    @id @default(autoincrement())
  post      Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: SetDefault)
  postId    Int
  thumbnail String
}

model Favorites {
  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [uuid], onDelete: Cascade)

  @@id([postId, userId])
}

model Car {
  postId       Int     @id @unique
  post         Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  kilometrage  String
  year         String
  horsepower   String
  transmission String
  brand        String
  model        String
  color        String
  damaged      Boolean
  trade        Boolean
}

model Estate {
  postId     Int     @id @unique
  post       Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  space      String
  rooms      String
  floor      String
  furniture  Boolean
  renovation Boolean
}

model User {
  uuid      String      @id @default(uuid())
  name      String
  email     String      @unique
  createdAt DateTime    @default(now())
  password  String
  posts     Post[]
  favorites Favorites[]
  avatar    Avatar?
}

model Avatar {
  userId String @id
  user   User   @relation(fields: [userId], references: [uuid])
  image  String
}
